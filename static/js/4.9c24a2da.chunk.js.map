{"version":3,"sources":["views/TrackCover.tsx","views/TrackCover.module.scss","views/PlaylistOverview.tsx","views/PlaylistOverview.module.scss","views/Track.module.scss","views/AddToPlaylist.module.scss","components/Form.module.scss","components/Input.module.scss","components/Input.tsx","components/Form.tsx","views/AddToPlaylist.tsx","views/Track.tsx","pages/PlaylistPage.tsx"],"names":["TrackCover","track","className","styles","cover","alt","title","src","artwork_url","replace","imgPlaceholder","onError","e","target","module","exports","PlaylistOverview","playlist","clickHandler","playlistOverview","onClick","covers","tracks","slice","map","idx","playlistInfo","name","length","Input","changeHandler","label","value","option","selectAllOnFocus","props","InputOrTextarea","inputRef","useRef","group","cn","shrink","ref","textarea","input","onChange","onFocus","current","select","Form","submitFn","inputItems","children","defaultItems","Object","assign","entries","defaultValue","useState","setInput","submitHandler","a","preventDefault","form","onSubmit","inputs","AddToPlaylist","hideAddToPlaylist","dispatch","useAppDispatch","playlists","useAppSelector","selectPlaylists","showNewPlaylist","setShowNewPlaylist","overlay","currentTarget","addToPlaylist","titleDiv","Button","newPlaylistForm","playlistName","placeholder","required","autoFocus","createPlaylist","btns","styledAs","type","Track","play","showAddToPlaylist","setShowAddToPlaylist","coverDiv","info","artist","user","username","control","PlaylistPage","useParams","selectPlaylist","index","changeTrack"],"mappings":"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","file":"static/js/4.9c24a2da.chunk.js","sourcesContent":["import styles from './TrackCover.module.scss';\n\nimport { SoundcloudTrack } from 'soundcloud';\nimport { imgPlaceholder } from 'utils/constants';\n\n\nfunction TrackCover({\n  track\n}: {\n  track: SoundcloudTrack;\n}) {\n  return (\n    <div className={styles.cover}>\n      <img\n        alt={track.title + ' cover'}\n        src={\n          track.artwork_url?.replace(/large(?=.jpg)/i, 'small')\n          || imgPlaceholder\n        }\n        onError={(e) => {\n          const img = e.target as HTMLImageElement;\n          img.src = imgPlaceholder;\n        }}\n      />\n    </div>\n  );\n}\n\nexport default TrackCover;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"TrackCover_cover__3GYvv\"};","import styles from './PlaylistOverview.module.scss';\n\nimport { Playlist } from 'app/playlistSlice';\n\nimport TrackCover from 'views/TrackCover';\nimport Button from 'components/Button';\n\n\nfunction PlaylistOverview({\n  playlist,\n  clickHandler\n}: {\n  playlist: Playlist;\n  clickHandler?: () => void;\n}) {\n\n  return (\n    <Button\n      className={styles.playlistOverview}\n      onClick={clickHandler}\n    >\n      <div className={styles.covers}>\n        {playlist.tracks.slice(0, 4).map((track, idx) =>\n          <TrackCover\n            key={idx}\n            track={track}\n          />\n        )}\n      </div>\n      <div className={styles.playlistInfo}>\n        <p>\n          {playlist.name}\n        </p>\n        <p>\n          {playlist.tracks.length} {(playlist.tracks.length > 1) ? 'songs' : 'song'}\n        </p>\n      </div>\n    </Button>\n  );\n}\n\nexport default PlaylistOverview;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistOverview\":\"PlaylistOverview_playlistOverview__kFYPC\",\"covers\":\"PlaylistOverview_covers__14WkO\",\"playlistInfo\":\"PlaylistOverview_playlistInfo__1vhdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"track\":\"Track_track__5LPLq\",\"coverDiv\":\"Track_coverDiv__3AwR_\",\"info\":\"Track_info__H-P9w\",\"title\":\"Track_title__Ol6tv\",\"artist\":\"Track_artist__3iizf\",\"material-icons\":\"Track_material-icons__SJW1i\",\"control\":\"Track_control__2RYVF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"AddToPlaylist_overlay__1tDjA\",\"addToPlaylist\":\"AddToPlaylist_addToPlaylist__jmm0o\",\"titleDiv\":\"AddToPlaylist_titleDiv__3eDc6\",\"playlists\":\"AddToPlaylist_playlists__V2rAc\",\"btns\":\"AddToPlaylist_btns__2VZhE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1Bouk\",\"inputs\":\"Form_inputs__2bRNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Input_group__1Md7W\"};","import styles from './Input.module.scss';\nimport { useRef } from 'react';\nimport cn from 'classnames';\n\nexport interface InputOptions {\n  type?: string,\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n\n  option?: 'input' | 'textarea';\n  label?: string;\n  defaultValue?: string,\n  selectAllOnFocus?: boolean;\n}\n\nexport type ChangeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n\nconst Input = ({\n  changeHandler,\n  label,\n  value,\n  option,\n  selectAllOnFocus,\n  ...props\n}: {\n  changeHandler?: ChangeHandler;\n  name?: string;\n  label?: string;\n  value: string;\n} & InputOptions\n) => {\n  const InputOrTextarea = option || 'input';\n  const inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);\n\n  return (\n    <div className={styles.group}>\n      {\n        label && (\n          <label\n            className={cn({ [styles.shrink]: value })}\n          >\n            {label}\n          </label>\n        )\n      }\n      <InputOrTextarea\n        ref={inputRef}\n        className={(\n          option === 'textarea'\n        ) ? styles.textarea\n          : styles.input\n        }\n        onChange={changeHandler}\n        {...((selectAllOnFocus) && {\n          onFocus: () => inputRef.current?.select()\n        })}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import styles from './Form.module.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nimport Input, { InputOptions, ChangeHandler } from './Input';\n\n\nfunction Form<\n  T extends Record<string, InputOptions>\n>({\n  submitFn,\n  inputItems,\n  children,\n  className,\n  ...props\n}: {\n  submitFn?: (inputItems: Record<keyof T, string>) => void | Promise<void>;\n  inputItems: T;\n  children?: React.ReactNode;\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLFormElement>, HTMLFormElement>\n) {\n\n  const defaultItems = Object.assign(\n    Object.entries(inputItems).map(([name, value]) => ({\n      [name]: value.defaultValue || ''\n    }))\n  );\n\n  const [input, setInput] = useState(defaultItems);\n\n  const changeHandler: ChangeHandler = (e) => {\n    const { name, value } = e.target;\n\n    setInput({\n      ...input,\n      [name]: value\n    });\n  };\n\n  const submitHandler = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await submitFn?.(input);\n    setInput(defaultItems);\n  };\n\n  return (\n    <form\n      className={cn(styles.form, className)}\n      onSubmit={submitHandler}\n      {...props}\n    >\n      <div className={styles.inputs}>\n        {\n          Object.entries(inputItems).map(([name, value], idx) => (\n            <Input\n              key={idx}\n              changeHandler={changeHandler}\n              name={name}\n              value={input[name]}\n              {...value}\n            />\n          ))\n        }\n      </div>\n      {children}\n    </ form>\n  );\n}\n\nexport default Form;\n","import styles from './AddToPlaylist.module.scss';\nimport { SoundcloudTrack } from 'soundcloud';\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks';\nimport { selectPlaylists, createPlaylist, addToPlaylist } from 'app/playlistSlice';\n\nimport PlaylistOverview from 'views/PlaylistOverview';\nimport Button from 'components/Button';\nimport Form from 'components/Form';\nimport { useState } from 'react';\n\n\nfunction AddToPlaylist({\n  track,\n  hideAddToPlaylist\n}: {\n  track: SoundcloudTrack;\n  hideAddToPlaylist: () => void;\n}) {\n  const dispatch = useAppDispatch();\n  const playlists = useAppSelector(selectPlaylists);\n  const [showNewPlaylist, setShowNewPlaylist] = useState(false);\n\n  return (\n    <div\n      className={styles.overlay}\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) return;\n        hideAddToPlaylist();\n      }}\n    >\n      <div className={styles.addToPlaylist}>\n        <div className={styles.titleDiv}>\n          <p>\n            Add to...\n          </p>\n          <Button\n            className='material-icons'\n            onClick={() => hideAddToPlaylist()}\n          >\n            close\n          </Button>\n        </div>\n        {(\n          showNewPlaylist\n        ) ? (\n            <Form\n              className={styles.newPlaylistForm}\n              inputItems={{\n                playlistName: {\n                  placeholder: 'playlistName',\n                  required: true,\n                  autoFocus: true\n                }\n              }}\n              submitFn={(inputItems) => {\n                dispatch(createPlaylist(inputItems.playlistName));\n                setShowNewPlaylist(false);\n              }}\n            >\n              <div className={styles.btns}>\n                <Button\n                  styledAs='bigWhite'\n                  onClick={() => setShowNewPlaylist(false)}\n                >\n                Cancel\n                </Button>\n                <Button\n                  styledAs='bigWhite'\n                  type='submit'\n                >\n                Create\n                </Button>\n              </div>\n            </Form>\n          ) : (\n            <>\n              <div className={styles.playlists}>\n                {(playlists).map((playlist, idx) =>\n                  <PlaylistOverview\n                    key={idx}\n                    playlist={playlist}\n                    clickHandler={() => dispatch(addToPlaylist({ playlist, track }))}\n                  />\n                )}\n              </div>\n              <Button\n                styledAs='bigWhite'\n                onClick={() => setShowNewPlaylist(true)}\n              >\n                <span className='material-icons'>\n                add\n                </span>\n              New Playlist\n              </Button>\n            </>\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default AddToPlaylist;\n","import styles from './Track.module.scss';\nimport { useState } from 'react';\nimport { SoundcloudTrack } from 'soundcloud';\n\nimport TrackCover from 'views/TrackCover';\nimport AddToPlaylist from 'views/AddToPlaylist';\nimport Button from 'components/Button';\n\n\nfunction Track({\n  track,\n  play,\n}: {\n  track: SoundcloudTrack;\n  play: () => void;\n}) {\n  const [showAddToPlaylist, setShowAddToPlaylist] = useState(false);\n\n  return (\n    <>\n      <div\n        className={styles.track}\n      >\n        <div className={styles.coverDiv}>\n          <TrackCover track={track} />\n          <Button\n            className='material-icons'\n            onClick={play}\n          >\n            play_arrow\n          </Button>\n        </div>\n\n        <div className={styles.info}>\n          <p className={styles.title}>\n            {track.title}\n          </p>\n          <p className={styles.artist}>\n            {track.user.username}\n          </p>\n        </div>\n\n        <div className={styles.control}>\n          <Button\n            className='material-icons'\n            onClick={() => setShowAddToPlaylist(true)}\n          >\n            add_box\n          </Button>\n        </div>\n      </div>\n      {\n        (showAddToPlaylist) && (\n          <AddToPlaylist\n            track={track}\n            hideAddToPlaylist={() => setShowAddToPlaylist(false)}\n          />\n        )\n      }\n    </>\n  );\n}\n\nexport default Track;","import { useParams } from 'react-router-dom';\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks';\nimport { selectPlaylist } from 'app/playlistSlice';\nimport { changeTrack } from 'app/playerSlice';\n\nimport Track from 'views/Track';\n\n\nfunction PlaylistPage() {\n  const { playlistName } = useParams<{ playlistName: string; }>();\n  const dispatch = useAppDispatch();\n  const playlist = useAppSelector(selectPlaylist(playlistName));\n\n  return (\n    <div>\n      <p>\n        {playlist.name}\n      </p>\n      {\n        playlist.tracks.map((track, index) => (\n          <Track\n            key={index}\n            track={track}\n            play={() => dispatch(changeTrack(index))}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default PlaylistPage;\n"],"sourceRoot":""}